仅只针对二叉树的层序遍历问题。

题目来源：leetcode。

给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。

输入：二叉树：[3,9,20,null,null,15,7]
          3
         / \
        9  20
          /  \
         15   7
输出：[
      [3],
      [9,20],
      [15,7]
     ]


//定义一个二叉树
public class TreeNode
{
  int value;
  TreeNode left;
  TreeNode right;
  TreeNode(int x) { value = x; }
}



class Solution
{
    public List<List<Integer>> main(TreeNode root)
    {
       List<List<Integer>> result = new ArrayList<List<Integer>>(); //新建结果列表
       
       if(root == null)
       {
         return null;
       }
       
       Queue<TreeNode> queue = new LinkedList<TreeNode>(); //新建队列用来储存节点
       queue.add(root);
       
       while(!queue.isEmpty())
       {
         int size = queue.size();
         List<Integer> temp = new ArrayList<Integer>(); // 列表用来记录节点的树数值
         
         for(int i = 0; i < size; i++)
         {
            TreeNode node = queue.poll(); //将队列的节点全部取出
            temp.add(node.value); //加入当前节点进入临时的列表
            
            if(node.left != null)
               queue.add(node.left); //判断节点是否有子节点，有的话就加入队列继续向下探索
            
            if(node.right != null)
               queue.add(node.right);
         }
         result.add(temp)
       }
       return result;
    }
}
