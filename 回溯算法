用一个leetcode的例题加强回溯算法的印象。

题目： 给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。

输入： n = 4, k = 2
输出：[
      [2,4],
      [3,4],
      [2,3],
      [1,2],
      [1,3],
      [1,4],
      ]
      
这一题用一般的循环无法获得很满意的答案，回溯可以弥补这样的问题。


class Solution
{
    List<List<Integer>> result = new LinkedList<>();//结果路径
    List<Integer> subResult = new LinkedList<>();//分支路径
    
    public List<List<Integer>> main(int n, int k)
    {
      backTrack(n,k,1);
      return result;
    }
    
    public void backTrack(int n, int k, int start)
    {
      //剪枝（约束的条件），约束了当k的值过大，n的总数不足以支撑时，直接进行返回。
      if(k - subResult.size() > n - start + 1)
      {
        return;
      }
      
      //结束的条件，当长度达到了k的长度，回溯就可以结束了。
      if(k == subResult.size())
      {
        result.add(new LinkedList(subResult));
        return;
      }
     
      //回溯的运行过程
      for(int i = start; i <= n; i++)
      {
        subResult.add(i);//加入一个数字
        backTrack(n,k,i+1);//进入下一层继续 # 切记：i + 1 不能写成i++ #
        subResult.remove(subResult.size() - 1);//当下一层全部完成的时候，把加入的数字删除，重新进行加入。
      }
    }
}
